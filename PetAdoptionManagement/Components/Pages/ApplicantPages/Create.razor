@page "/applicants/create"
@using Microsoft.EntityFrameworkCore
@using PetAdoptionManagement.Components.Domain
@inject IDbContextFactory<PetAdoptionManagement.Data.PetAdoptionManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Applicant</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Applicant" OnValidSubmit="AddApplicant" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Applicant.Name" class="form-control" />
                <ValidationMessage For="() => Applicant.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="Applicant.Email" class="form-control" />
                <ValidationMessage For="() => Applicant.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="age" class="form-label">Age:</label>
                <InputNumber id="age" @bind-Value="Applicant.Age" class="form-control" />
                <ValidationMessage For="() => Applicant.Age" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label>
                <InputText id="address" @bind-Value="Applicant.Address" class="form-control" />
                <ValidationMessage For="() => Applicant.Address" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="phonenumber" class="form-label">Phone Number:</label>
                <InputText id="phonenumber" @bind-Value="Applicant.PhoneNumber" class="form-control" />
                <ValidationMessage For="() => Applicant.PhoneNumber" class="text-danger" />
            </div>

            <!-- Updated ReviewStatus Dropdown for Enum Binding -->
            <div class="mb-3">
                <label for="reviewstatus" class="form-label">Review Status:</label>
                <select id="reviewstatus" @bind="Applicant.ReviewStatus" class="form-control">
                    <option value="@ReviewStatusEnum.Pending">@ReviewStatusEnum.Pending</option>
                    <option value="@ReviewStatusEnum.Approved">@ReviewStatusEnum.Approved</option>
                    <option value="@ReviewStatusEnum.Rejected">@ReviewStatusEnum.Rejected</option>
                </select>
                <ValidationMessage For="() => Applicant.ReviewStatus" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="userid" class="form-label">UserId:</label>
                <InputNumber id="userid" @bind-Value="Applicant.UserId" class="form-control" />
                <ValidationMessage For="() => Applicant.UserId" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/applicants">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Applicant Applicant { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddApplicant()
    {
        using var context = DbFactory.CreateDbContext();
        context.Applicant.Add(Applicant);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/applicants");
    }
}
