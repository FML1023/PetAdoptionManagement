@page "/applications/edit"
@using Microsoft.EntityFrameworkCore
@using PetAdoptionManagement.Components.Domain
@inject IDbContextFactory<PetAdoptionManagement.Data.PetAdoptionManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Application</h2>
<hr />
@if (Application is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Application" OnValidSubmit="UpdateApplication" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Application.Id" value="@Application.Id" />

                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Application.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Application.DateCreated" class="text-danger" />
                </div>

                <!-- Review Status Dropdown -->
                <div class="mb-3">
                    <label for="reviewstatus" class="form-label">Review Status:</label>
                    <select id="reviewstatus" @bind="Application.ReviewStatus" class="form-control">
                        @foreach (var status in Enum.GetValues(typeof(ReviewStatusEnum)))
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                    <ValidationMessage For="() => Application.ReviewStatus" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="createdby" class="form-label">Created By:</label>
                    <InputText id="createdby" @bind-Value="Application.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Application.CreatedBy" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="petid" class="form-label">PetID:</label>
                    <InputNumber id="petid" @bind-Value="Application.PetID" class="form-control" />
                    <ValidationMessage For="() => Application.PetID" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="userid" class="form-label">UserID:</label>
                    <InputNumber id="userid" @bind-Value="Application.UserID" class="form-control" />
                    <ValidationMessage For="() => Application.UserID" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/applications">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Application? Application { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Application ??= await context.Application.FirstOrDefaultAsync(m => m.Id == Id);

        if (Application is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateApplication()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Application!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ApplicationExists(Application!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/applications");
    }

    private bool ApplicationExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Application.Any(e => e.Id == id);
    }
}
}