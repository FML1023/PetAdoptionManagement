@page "/application/edit"
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<PetAdoptionManagementContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<PetAdoptionManagementUser> UserManager

<PageTitle>Edit Adoption Application</PageTitle>

<div class="container mt-5" style="font-family: 'Poppins', sans-serif;">
    <div class="card shadow-sm" style="border-radius: 15px; background: #fff8e1; padding: 2rem; max-width: 800px; margin: 0 auto;">
        <h1 class="mb-4" style="color: #D1913C;">Edit Adoption Application</h1>

        @if (!isAuthorized)
        {
            <p class="text-danger">You are not authorized to edit this application.</p>
        }
        else if (Application == null)
        {
            <p>Loading application...</p>
        }
        else
        {
            <EditForm Model="@Application" OnValidSubmit="UpdateApplication">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label for="petName" class="form-label">Pet Name:</label>
                    <p class="form-control-plaintext">@Pet?.Name</p>
                </div>

                <!-- Reason for Adoption -->
                <div class="mb-3">
                    <label for="reason">Reason for Adoption:</label>
                    <InputTextArea id="reason" @bind-Value="Application.ReasonForAdoption" class="form-control" />
                    <ValidationMessage For="() => Application.ReasonForAdoption" />
                </div>

                <!-- Living Situation -->
                <div class="mb-3">
                    <label for="livingSituation" class="form-label">Living Situation:</label>
                    <InputText id="livingSituation" @bind-Value="Application.LivingSituation" class="form-control" />
                    <ValidationMessage For="() => Application.LivingSituation" class="text-danger" />
                </div>

                <!-- Other Pets -->
                <div class="mb-3">
                    <label for="otherPets" class="form-label">Do you have other pets?</label>
                    <InputText id="otherPets" @bind-Value="Application.OtherPets" class="form-control" />
                    <ValidationMessage For="() => Application.OtherPets" class="text-danger" />
                </div>

                <!-- Pet Experience -->
                <div class="mb-3">
                    <label for="experience" class="form-label">Experience with Pets:</label>
                    <InputText id="experience" @bind-Value="Application.PetExperience" class="form-control" />
                    <ValidationMessage For="() => Application.PetExperience" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-success" style="width: 100%; border-radius: 25px;">Save Changes</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }

            @if (showSuccessMessage)
            {
                <div class="alert alert-success mt-4" style="border-radius: 15px; padding: 1rem; font-size: 1.1rem; text-align: center; background: #DFF2BF; color: #4F8A10; border: 1px solid #D6E9C6;">
                    🎉 Changes saved successfully! You will be redirected to your profile shortly.
                </div>
            }
        }
    </div>

    <div class="text-center mt-4">
        <a href="/application/details" class="btn btn-outline-secondary" style="border-radius: 25px;">Back to Applications</a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }
    private Pet? Pet;
    private Application? Application;
    private bool isAuthorized = false;
    private string? errorMessage;
    private bool showSuccessMessage = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Fetching application with Id = {Id}");

        using var context = await DbFactory.CreateDbContextAsync();
        Application = await context.Application
            .Include(a => a.Pet)
            .FirstOrDefaultAsync(a => a.Id == Id);

        if (Application == null)
        {
            Console.WriteLine("Application not found. Redirecting...");
            NavigationManager.NavigateTo("/application/details");
            return;
        }

        Pet = Application.Pet;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null && appUser.Id == Application.UserId)
            {
                isAuthorized = true;
                Console.WriteLine("User authorized to edit application.");
            }
            else
            {
                Console.WriteLine("User is not authorized.");
                NavigationManager.NavigateTo("/application/details");
                return;
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
            NavigationManager.NavigateTo("/application/details");
            return;
        }
    }

    private async Task UpdateApplication()
    {
        Console.WriteLine("UpdateApplication method is called.");

        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var existingApplication = await context.Application.FirstOrDefaultAsync(a => a.Id == Id);

            if (existingApplication == null)
            {
                Console.WriteLine("Application not found.");
                errorMessage = "Application not found.";
                return;
            }

            Console.WriteLine("Application found. Updating values...");

            existingApplication.ReasonForAdoption = Application.ReasonForAdoption;
            existingApplication.LivingSituation = Application.LivingSituation;
            existingApplication.OtherPets = Application.OtherPets;
            existingApplication.PetExperience = Application.PetExperience;

            await context.SaveChangesAsync();

            Console.WriteLine("Changes saved successfully!");

            showSuccessMessage = true;
            StateHasChanged();

            await Task.Delay(1000);
            NavigationManager.NavigateTo("/application/details");
        }
        catch (Exception ex)
        {
            errorMessage = "Error saving changes. Please try again.";
            Console.WriteLine($"Error updating application: {ex.Message}");
        }
    }
}

