@page "/application/create"
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<PetAdoptionManagementContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<PetAdoptionManagementUser> UserManager

<PageTitle>Apply to Adopt</PageTitle>

<div class="container-fluid p-0" style="font-family: 'Poppins', sans-serif;
            background: linear-gradient(to bottom, #FFD194, #D1913C);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 50px 0;">
    <div class="container" style="max-width: 600px; width: 100%; margin-left: 675px;">
        <div class="card shadow-sm" style="border-radius: 15px; background: #fff8e1; padding: 2rem; max-width: 800px; margin: 0 auto;">
            <h1 class="mb-4" style="color: #D1913C;">Adoption Application</h1>

            @if (Application != null)
            {
                <EditForm Model="@Application" OnValidSubmit="SubmitApplication">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <!-- PetName -->
                    <div class="mb-3">
                        <label for="petName" class="form-label">Pet Name:</label>
                        <p class="form-control-plaintext">@Pet?.Name</p>
                    </div>

                    <!-- Reason for Adoption -->
                    <div class="mb-3">
                        <label for="reason">Reason for Adoption:</label>
                        <InputTextArea id="reason" @bind-Value="Application.ReasonForAdoption" class="form-control" />
                        <ValidationMessage For="() => Application.ReasonForAdoption" />
                    </div>

                    <!-- Living Situation -->
                    <div class="mb-3">
                        <label for="livingSituation" class="form-label">Living Situation:</label>
                        <InputText id="livingSituation" @bind-Value="Application.LivingSituation" class="form-control" placeholder="Describe your home environment" />
                        <ValidationMessage For="() => Application.LivingSituation" class="text-danger" />
                    </div>

                    <!-- Other Pets -->
                    <div class="mb-3">
                        <label for="otherPets" class="form-label">Do you have other pets?</label>
                        <InputText id="otherPets" @bind-Value="Application.OtherPets" class="form-control" placeholder="List any pets you currently own" />
                        <ValidationMessage For="() => Application.OtherPets" class="text-danger" />
                    </div>

                    <!-- Pet Experience -->
                    <div class="mb-3">
                        <label for="experience" class="form-label">Experience with Pets:</label>
                        <InputText id="experience" @bind-Value="Application.PetExperience" class="form-control" placeholder="Describe your past experience with pets" />
                        <ValidationMessage For="() => Application.PetExperience" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            }
            else
            {
                <p>Loading application...</p>
            }

            <div class="text-center mt-4">
                 <a href="/pets" class="btn btn-outline-secondary" style="border-radius: 25px;">Back to Pets</a>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }
    private Pet? Pet;
    private Application Application { get; set; } = new();
    private string UserId { get; set; } = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {

        using var context = await DbFactory.CreateDbContextAsync();
        Pet = await context.Pet.FirstOrDefaultAsync(p => p.Id == Id);

        if (Pet == null)
        {
            Console.WriteLine("Pet not found. Redirecting...");
            NavigationManager.NavigateTo("/notfound");
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                Application = new Application 
                    {
                        UserId = appUser.Id.Trim(),
                        CreatedBy = appUser.Email,
                        PetID = Pet.Id,
                        DateCreated = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow,
                                     TimeZoneInfo.FindSystemTimeZoneById("Singapore Standard Time")),
                        ReviewStatus = ReviewStatusEnum.Pending,
                        ReasonForAdoption = string.Empty, 
                        LivingSituation = string.Empty,
                        OtherPets = string.Empty,
                        PetExperience = string.Empty
                    };

                Console.WriteLine($"Application Initialized: UserID: {Application.UserId}, PetID: {Application.PetID}");
            }
            else
            {
                Console.WriteLine("User is authenticated but AppUser is NULL.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task SubmitApplication()
    {
        if (string.IsNullOrEmpty(Application.UserId))
        {
            Console.WriteLine("User is not authenticated or UserId not found.");
            NavigationManager.NavigateTo("/pets");
            return;
        }

        using var context = await DbFactory.CreateDbContextAsync();

        Application.DateCreated = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow,
                             TimeZoneInfo.FindSystemTimeZoneById("Singapore Standard Time"));
        Application.ReviewStatus = ReviewStatusEnum.Pending;

        try
        {
            context.Application.Add(Application);
            await context.SaveChangesAsync();
            Console.WriteLine("Application successfully submitted!");
            NavigationManager.NavigateTo("/application/details");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving application: {ex.Message}");
        }
    }
}
