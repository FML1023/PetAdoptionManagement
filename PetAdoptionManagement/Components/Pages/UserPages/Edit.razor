@page "/users/edit"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using PetAdoptionManagement.Components.Domain
@inject IDbContextFactory<PetAdoptionManagement.Data.PetAdoptionManagementContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Edit Profile</PageTitle>

<div class="container-fluid p-0" style="font-family: 'Poppins', sans-serif; background: #FFD194; min-height: 100vh; display: flex; align-items: center; justify-content: center;">
    <div class="card shadow-lg" style="background: #fff8e1; border-radius: 15px; padding: 2rem; max-width: 600px; width: 100%;">
        <h2 class="text-center mb-4" style="color: #D1913C;">Edit Profile</h2>

        @if (isLoading)
        {
            <p class="text-center text-muted"><em>Loading...</em></p>
        }
        else if (user is null)
        {
            <p class="text-danger text-center">User not found.</p>
            <div class="text-center mt-4">
                <a href="/" class="btn btn-outline-secondary px-5 py-2" style="border-radius: 25px;">Back to Home</a>
            </div>
        }
        else
        {
            <EditForm Model="@user" OnValidSubmit="SaveChanges" FormName="editProfileForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <!-- Email -->
                <div class="mb-3">
                    <label for="email" class="form-label" style="color: #333;">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="user.Email" disabled style="background: #f9f9f9;" />
                </div>

                <!-- Name -->
                <div class="mb-3">
                    <label for="name" class="form-label" style="color: #333;">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="user.Name" disabled style="background: #f9f9f9;" />
                </div>

                <!-- Age -->
                <div class="mb-3">
                    <label for="age" class="form-label" style="color: #333;">Age</label>
                    <InputNumber id="age" class="form-control" @bind-Value="user.Age" placeholder="Enter your age" />
                    <ValidationMessage For="() => user.Age" class="text-danger" />
                </div>

                <!-- Phone -->
                <div class="mb-3">
                    <label for="phone" class="form-label" style="color: #333;">Phone Number</label>
                    <InputText id="phone" class="form-control" @bind-Value="user.PhoneNumber" placeholder="Enter your phone number" />
                    <ValidationMessage For="() => user.PhoneNumber" class="text-danger" />
                </div>

                <!-- Address -->
                <div class="mb-3">
                    <label for="address" class="form-label" style="color: #333;">Address</label>
                    <InputText id="address" class="form-control" @bind-Value="user.Address" placeholder="Enter your address" />
                    <ValidationMessage For="() => user.Address" class="text-danger" />
                </div>


                @if (showSuccessMessage)
                {
                    <div class="alert alert-success mt-4" style="border-radius: 15px; padding: 1rem; font-size: 1.1rem; text-align: center; background: #DFF2BF; color: #4F8A10; border: 1px solid #D6E9C6;">
                        🎉 Changes saved successfully! You will be redirected to your profile shortly.
                    </div>
                }

                <!-- Buttons -->
                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-success px-5 py-2" style="border-radius: 25px;">Save Changes</button>
                    <a href="/users/details" class="btn btn-outline-secondary px-5 py-2" style="border-radius: 25px;">Cancel</a>
                </div>
            </EditForm>
        }
    </div>
</div>


@code {
    private User? user;
    private bool isLoading = true;
    private bool showSuccessMessage = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity == null || !currentUser.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
            return;
        }

        var email = currentUser.Identity.Name;

        using var context = await DbFactory.CreateDbContextAsync();
        user = await context.User.FirstOrDefaultAsync(u => u.Email == email);

        if (user == null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        if (user == null) return;

        using var context = await DbFactory.CreateDbContextAsync();
        var dbUser = await context.User.FirstOrDefaultAsync(u => u.Email == user.Email);

        if (dbUser != null)
        {
            dbUser.Age = user.Age;
            dbUser.PhoneNumber = user.PhoneNumber;
            dbUser.Address = user.Address;

            showSuccessMessage = true;
            StateHasChanged();

            await context.SaveChangesAsync();


            await Task.Delay(1000);
            NavigationManager.NavigateTo("/users/details");

        }
    }
}