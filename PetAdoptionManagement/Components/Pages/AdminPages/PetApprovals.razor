@page "/admin/petApprovals"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PetAdoptionManagement.Components.Domain
@using PetAdoptionManagement.Data
@inject AuthenticationStateProvider AuthProvider
@inject IDbContextFactory<PetAdoptionManagementContext> DbFactory
@inject NavigationManager Navigation

<PageTitle>Admin - Pet Approvals</PageTitle>

<div class="container-fluid p-0" style="font-family: 'Poppins', sans-serif; background: #FFD194; min-height: 100vh; display: flex; flex-direction: column; align-items: center;">
    <div class="container my-5" style="background: #fff8e1; border-radius: 15px; padding: 2rem; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        <h2 class="text-center" style="color: #D1913C;">Admin Panel - Manage Pet Listings</h2>
        <hr />

        @if (isLoading)
        {
            <p class="text-center"><em>Loading pets...</em></p>
        }
        else if (!isAuthorized)
        {
            <p class="text-danger text-center">You are not authorized to view this page.</p>
        }
        else
        {
            <div class="d-flex justify-content-center mb-4">
                <a href="/users" class="btn btn-outline-secondary px-4 py-2" style="border-radius: 25px; margin-right: 10px;">All Users</a>
                <a href="/admin/petApprovals" class="btn btn-outline-secondary px-4 py-2" style="border-radius: 25px; margin-right: 10px;">All Pet Listings</a>
                <a href="/admin/applicationApprovals" class="btn btn-outline-secondary px-4 py-2" style="border-radius: 25px;">All Applications</a>
            </div>

            <!-- Pending Pets -->
            <div class="card shadow-sm mb-4" style="border-radius: 15px;">
                <div class="card-header bg-warning text-white" style="border-radius: 15px 15px 0 0;">
                    <h4>Pending Pets</h4>
                </div>
                <div class="card-body">
                    @if (pendingPets.Any())
                    {
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Species</th>
                                    <th>Breed</th>
                                    <th>Age</th>
                                    <th>Owner Name</th>
                                    <th>Owner Email</th>
                                    <th>Owner Phone</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pet in pendingPets)
                                {
                                    <tr>
                                        <td>@pet.Name</td>
                                        <td>@pet.Species</td>
                                        <td>@pet.Breed</td>
                                        <td>@pet.Age</td>
                                        <td>@($"{pet.User?.FirstName} {pet.User?.LastName}")</td>
                                        <td>@pet.User?.Email</td>
                                        <td>@pet.User?.PhoneNumber</td>
                                        <td>
                                            <button class="btn btn-success btn-sm mx-1" style="border-radius: 25px;" @onclick="() => ApprovePet(pet.Id)">Approve</button>
                                            <button class="btn btn-danger btn-sm mx-1" style="border-radius: 25px;" @onclick="() => RejectPet(pet.Id)">Reject</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-center text-muted">No pending pets.</p>
                    }
                </div>
            </div>

            <!-- Approved Pets -->
            <div class="card shadow-sm mb-4" style="border-radius: 15px;">
                <div class="card-header bg-success text-white" style="border-radius: 15px 15px 0 0;">
                    <h4>Approved Pets</h4>
                </div>
                <div class="card-body">
                    @if (approvedPets.Any())
                    {
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Species</th>
                                    <th>Breed</th>
                                    <th>Age</th>
                                    <th>Owner Name</th>
                                    <th>Owner Email</th>
                                    <th>Owner Phone</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pet in approvedPets)
                                {
                                    <tr>
                                        <td>@pet.Name</td>
                                        <td>@pet.Species</td>
                                        <td>@pet.Breed</td>
                                        <td>@pet.Age</td>
                                        <td>@($"{pet.User?.FirstName} {pet.User?.LastName}")</td>
                                        <td>@pet.User?.Email</td>
                                        <td>@pet.User?.PhoneNumber</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-center text-muted">No approved pets.</p>
                    }
                </div>
            </div>

            <!-- Rejected Pets -->
            <div class="card shadow-sm" style="border-radius: 15px;">
                <div class="card-header bg-danger text-white" style="border-radius: 15px 15px 0 0;">
                    <h4>Rejected Pets</h4>
                </div>
                <div class="card-body">
                    @if (rejectedPets.Any())
                    {
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Species</th>
                                    <th>Breed</th>
                                    <th>Age</th>
                                    <th>Owner Name</th>
                                    <th>Owner Email</th>
                                    <th>Owner Phone</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pet in rejectedPets)
                                {
                                    <tr>
                                        <td>@pet.Name</td>
                                        <td>@pet.Species</td>
                                        <td>@pet.Breed</td>
                                        <td>@pet.Age</td>
                                        <td>@($"{pet.User?.FirstName} {pet.User?.LastName}")</td>
                                        <td>@pet.User?.Email</td>
                                        <td>@pet.User?.PhoneNumber</td>
                                        <td>
                                            <button class="btn btn-warning btn-sm mx-1" style="border-radius: 25px;" @onclick="() => ReconsiderPet(pet.Id)">Reconsider</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p class="text-center text-muted">No rejected pets.</p>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Pet> pendingPets = new();
    private List<Pet> approvedPets = new();
    private List<Pet> rejectedPets = new();
    private bool isLoading = true;
    private bool isAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated || !user.IsInRole("Administrator"))
        {
            Navigation.NavigateTo("/Account/Login", forceLoad: true);
            return;
        }

        isAuthorized = true;
        await LoadPetsAsync();
    }

    private async Task LoadPetsAsync()
    {
        isLoading = true;
        using var context = await DbFactory.CreateDbContextAsync();

        // ✅ Include user details when fetching pets
        pendingPets = await context.Pet
            .Include(p => p.User)
            .Where(p => p.ReviewStatus == ReviewStatusEnum.Pending)
            .ToListAsync();

        approvedPets = await context.Pet
            .Include(p => p.User)
            .Where(p => p.ReviewStatus == ReviewStatusEnum.Approved)
            .ToListAsync();

        rejectedPets = await context.Pet
            .Include(p => p.User)
            .Where(p => p.ReviewStatus == ReviewStatusEnum.Rejected)
            .ToListAsync();

        isLoading = false;
        StateHasChanged(); // ✅ Force UI refresh
    }

    private async Task ApprovePet(int petId)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var pet = await context.Pet.FindAsync(petId);
        if (pet != null)
        {
            pet.ReviewStatus = ReviewStatusEnum.Approved;
            pet.Status = true; // ✅ Make it visible to users
            await context.SaveChangesAsync();
        }
        await LoadPetsAsync();
    }

    private async Task RejectPet(int petId)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var pet = await context.Pet.FindAsync(petId);
        if (pet != null)
        {
            pet.ReviewStatus = ReviewStatusEnum.Rejected;
            pet.Status = false; // ✅ Hide from users
            await context.SaveChangesAsync();
        }
        await LoadPetsAsync();
    }

    private async Task ReconsiderPet(int petId)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var pet = await context.Pet.FindAsync(petId);
        if (pet != null)
        {
            pet.ReviewStatus = ReviewStatusEnum.Pending; // ✅ Move back to pending
            await context.SaveChangesAsync();
        }
        await LoadPetsAsync();
    }
}