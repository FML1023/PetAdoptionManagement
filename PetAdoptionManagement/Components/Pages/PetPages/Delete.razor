@page "/pets/delete"
@using Microsoft.EntityFrameworkCore
@using PetAdoptionManagement.Components.Domain
@inject IDbContextFactory<PetAdoptionManagement.Data.PetAdoptionManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<div class="container mt-5" style="font-family: 'Poppins', sans-serif; background-color: #fff8e1; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
    <h1 class="text-center" style="color: #D1913C;">Confirm Delete</h1>
    <hr />
    @if (Pet is null)
    {
        <p class="text-center"><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Name</dt>
            <dd class="col-sm-9">@Pet.Name</dd>

            <!-- Other Fields -->
        </dl>
        <div class="text-center mt-4">
            <form method="post" @formname="DeletePetForm" @onsubmit="HandleSubmit">
                <!-- Antiforgery Token -->
                <AntiforgeryToken />

                <!-- Hidden input to pass the Pet ID -->
                <input type="hidden" name="PetId" value="@Pet?.Id" />

                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="/pets" class="btn btn-outline-secondary">Cancel</a>
            </form>
        </div>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private Pet? Pet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Fetching pet with Id: {Id}"); // Debug output
        using var context = DbFactory.CreateDbContext();
        Pet = await context.Pet.FirstOrDefaultAsync(m => m.Id == Id);

        if (Pet is null)
        {
            Console.WriteLine($"Pet with Id: {Id} not found"); // Debug output
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task HandleSubmit()
    {
        // Get the pet ID from the hidden input
        if (Pet is null)
        {
            NavigationManager.NavigateTo("/pets");
            return;
        }

        using var context = DbFactory.CreateDbContext();
        var petToDelete = await context.Pet.FirstOrDefaultAsync(p => p.Id == Pet.Id);

        if (petToDelete is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        context.Pet.Remove(petToDelete);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/pets");
    }
}
