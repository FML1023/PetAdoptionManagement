@page "/pets"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PetAdoptionManagement.Components.Domain
@using PetAdoptionManagement.Data
@inject IDbContextFactory<PetAdoptionManagementContext> DbFactory
@inject NavigationManager Navigation

<PageTitle>Pets</PageTitle>

<div class="container mt-4" style="font-family: 'Poppins', sans-serif; background-color: #fff8e1; padding: 20px; border-radius: 15px;">
    <h1 class="mb-4 text-center" style="color: #333;">Pets</h1>

    <p class="text-center">
        <a class="btn btn-primary" href="/pets/create" style="border-radius: 25px;">Create New</a>
    </p>

    <div class="d-flex">
        <InputText class="form-control" placeholder="Search by Name or Species" @bind-Value="searchQuery" />
        <button type="button" class="btn btn-primary ml-2" @onclick="OnSearchSubmitted">Search</button>
    </div>

    <div class="row mt-3">
        @if (filteredPets.Any())
        {
            foreach (var pet in filteredPets)
            {
                <div class="col-md-4 mb-4 d-flex align-items-stretch">
                    <div class="card shadow-sm w-100" style="border-radius: 15px;">
                       
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-center">@pet.Name</h5>
                            <p class="card-text"><strong>Species:</strong> @pet.Species</p>
                            <p class="card-text"><strong>Breed:</strong> @pet.Breed</p>
                            <p class="card-text"><strong>Age:</strong> @pet.Age years</p>
                            <a class="btn btn-outline-primary mt-auto w-100" href="@($"pets/details?id={pet.Id}")" style="border-radius: 25px;">Click to Find Out More</a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p>No pets available matching your search. Click "Create New" to add a pet.</p>
            </div>
        }
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private List<Pet> pets = new();
    private List<Pet> filteredPets = new();

    protected override async Task OnInitializedAsync()
    {
        var dbContext = await DbFactory.CreateDbContextAsync();

        // ✅ Filter pets by `Status == true` 
        pets = await dbContext.Pet
        .Include(p => p.User)
            .Where(p => p.Status)
            .ToListAsync();

        filteredPets = pets;

        // ✅ Extract query parameter correctly
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("search", out var searchParam))
        {
            searchQuery = searchParam.ToString();
            FilterPets();
        }
    }

    private void FilterPets()
    {
        filteredPets = string.IsNullOrWhiteSpace(searchQuery)
            ? pets
            : pets.Where(p =>
                (p.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Species?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
    }

    private void OnSearchSubmitted()
    {
        // ✅ Update URL without page refresh
        Navigation.NavigateTo($"/pets?search={Uri.EscapeDataString(searchQuery)}", forceLoad: false);

        // ✅ Apply the filter immediately
        FilterPets();
    }
}