@page "/reviews/delete"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PetAdoptionManagement.Components.Domain
@inject IDbContextFactory<PetAdoptionManagement.Data.PetAdoptionManagementContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Delete Review</PageTitle>

@if (IsAdmin)
{
    <div class="container-fluid p-0" style="font-family: 'Poppins', sans-serif;
            background: #FFD194;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 50px 0;">
        <div class="container" style="max-width: 600px; width: 100%;">
            <div class="card shadow-sm" style="border-radius: 15px; background: #fff8e1; padding: 2rem;">
                <h1 class="mb-4 text-danger text-center">Confirm Deletion</h1>
                <p class="text-muted text-center">Are you sure you want to delete this review?</p>

                @if (review is null)
                {
                    <p class="text-center"><em>Loading...</em></p>
                }
                else if (showSuccessMessage)
                {
                    <div class="alert alert-success mt-3 text-center" style="border-radius: 15px; padding: 1rem;">
                        🎉 Review deleted successfully! Redirecting...
                    </div>
                }
                else
                {
                    <dl class="row text-center">
                        <dt class="col-sm-4">Review:</dt>
                        <dd class="col-sm-8">@review.ReviewText</dd>

                        <dt class="col-sm-4">Created At:</dt>
                        <dd class="col-sm-8">@review.CreatedAt.ToString("yyyy-MM-dd HH:mm")</dd>

                        <dt class="col-sm-4">User:</dt>
                        <dd class="col-sm-8">@review.User?.Email</dd>

                        <dt class="col-sm-4">Pet:</dt>
                        <dd class="col-sm-8">@review.Pet?.Name (@review.Pet?.Species)</dd>
                    </dl>

                    <div class="text-center mt-4">
                        <button class="btn btn-danger px-4 py-2" style="border-radius: 25px;" @onclick="DeleteReview">Delete</button>
                        <a href="/reviews" class="btn btn-outline-secondary px-4 py-2 ms-2" style="border-radius: 25px;">Cancel</a>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center mt-5">
        <h2 class="text-danger">Access Denied</h2>
        <p>You are not authorized to delete reviews.</p>
        <a href="/reviews" class="btn btn-primary">Go Back</a>
    </div>
}

@code {
    private Review? review;
    private bool IsAdmin = false;
    private bool showSuccessMessage = false;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            Console.WriteLine("User is not authenticated. Redirecting...");
            NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        IsAdmin = user.IsInRole("Administrator");

        if (!IsAdmin)
        {
            Console.WriteLine("User is not an Admin. Redirecting...");
            NavigationManager.NavigateTo("/reviews");
            return;
        }

        using var context = await DbFactory.CreateDbContextAsync();
        review = await context.Review
            .Include(r => r.User)
            .Include(r => r.Pet)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (review is null)
        {
            Console.WriteLine("Review not found. Redirecting...");
            NavigationManager.NavigateTo("/notfound");
            return;
        }

        StateHasChanged();
    }

    private async Task DeleteReview()
    {
        if (review is null) return;

        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var reviewToDelete = await context.Review.FirstOrDefaultAsync(r => r.Id == review.Id);

            if (reviewToDelete == null)
            {
                Console.WriteLine("Review not found. Redirecting...");
                NavigationManager.NavigateTo("/notfound");
                return;
            }

            context.Review.Remove(reviewToDelete);
            await context.SaveChangesAsync();
            Console.WriteLine("Review deleted successfully!");

            showSuccessMessage = true;
            StateHasChanged();

            await Task.Delay(2000);
            NavigationManager.NavigateTo("/reviews");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting review: {ex.Message}");
        }
    }
}
