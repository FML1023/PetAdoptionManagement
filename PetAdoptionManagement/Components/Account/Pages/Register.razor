@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PetAdoptionManagement.Data

@using Microsoft.EntityFrameworkCore;
@using PetAdoptionManagement.Data;
@using PetAdoptionManagement.Components.Domain;

@inject UserManager<PetAdoptionManagementUser> UserManager
@inject IUserStore<PetAdoptionManagementUser> UserStore
@inject SignInManager<PetAdoptionManagementUser> SignInManager
@inject IEmailSender<PetAdoptionManagementUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject IDbContextFactory<PetAdoptionManagementContext> DbFactory



<PageTitle>Register</PageTitle>

<div class="d-flex align-items-center justify-content-center vh-100" style="background-color: #fff8e1; font-family: 'Poppins', sans-serif; position: relative;">
    <!-- Back to Home Button -->
    <a class="btn btn-outline-primary" href="/" style="position: absolute; top: 20px; right: 20px; border-radius: 25px;">
        Back to Home
    </a>

    <div class="container" style="max-width: 500px; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);">
        <h1 class="text-center mb-4">Register</h1>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="Input.Email" id="email" class="form-control" placeholder="Enter your email" autocomplete="username" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="firstname" class="form-label">First Name</label>
                <InputText @bind-Value="Input.FirstName" id="firstname" class="form-control" placeholder="Enter your first name" autocomplete="given-name" />
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="lastname" class="form-label">Last Name</label>
                <InputText @bind-Value="Input.LastName" id="lastname" class="form-control" placeholder="Enter your last name" autocomplete="family-name" />
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" id="password" class="form-control" placeholder="Enter your password" autocomplete="new-password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="confirm-password" class="form-label">Confirm Password</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="confirm-password" class="form-control" placeholder="Confirm your password" autocomplete="new-password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary w-100">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }

        await UserManager.AddToRoleAsync(user, "User");
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // Automatically sync with User Table after registration
        await SyncUserToDatabase(user);

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }


    private async Task SyncUserToDatabase(PetAdoptionManagementUser identityUser)
    {
        using var context = await DbFactory.CreateDbContextAsync();

        // Check if user already exists in User table
        var existingUser = await context.User.FirstOrDefaultAsync(u => u.Email == identityUser.Email);
        if (existingUser != null) return;

        var newUser = new User
            {
                Email = identityUser.Email,
                Name = $"{identityUser.FirstName} {identityUser.LastName}".Trim(), 
                Password = identityUser.PasswordHash,
                Role = "User",
                PhoneNumber = null,
                Address = null,
            };

        context.User.Add(newUser);
        await context.SaveChangesAsync();
    }

    private PetAdoptionManagementUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<PetAdoptionManagementUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(PetAdoptionManagementUser)}'. " +
                                                $"Ensure that '{nameof(PetAdoptionManagementUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<PetAdoptionManagementUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<PetAdoptionManagementUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
